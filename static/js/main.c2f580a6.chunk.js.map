{"version":3,"sources":["img/asset3.png","key.js","components/Form.js","components/Week.js","components/weatherChart.js","components/weatherCard.js","components/miniCard.js","components/Card.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiConfig","weatherKey","Form","className","onSubmit","this","props","handleSubmit","type","name","onChange","handleChange","value","city","placeholder","Component","Week","moment","reading","dt","format","Math","round","main","temp","weather","icon","description","weatherChart","time","fulldata","map","list","dt_txt","temperature","time1","Date","parse","chartData","i","length","push","toLocaleTimeString","console","log","day","style","display","marginBottom","width","height","chartType","loader","data","options","title","titleTextStyle","color","fontSize","chartArea","hAxis","minValue","fontStyle","textStyle","ticks","vAxis","legend","seriesType","colors","backgroundColor","legendToggle","WeatherCard","src","alt","MiniCard","Card","weekCards","weekdata","index","key","Row","Col","md","span","padding","margin","pressure","humidity","temp_max","temp_min","Main","state","id","today","week","fullweek","e","newcity","target","setState","preventDefault","fetchData","weatherUrl","fetch","then","response","json","weekUrl","weeklyData","filter","includes","catch","error","componentDidMount","fetchWeekData","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2f580a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/asset3.d920c599.png\";","var apiConfig ={\r\n  weatherKey: '9cc620c896bbb860514919d10eff671f'\r\n}\r\nexport default apiConfig\r\n","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"card card-sm card-form\" onSubmit={this.props.handleSubmit}>\r\n        <div className=\"card-body row no-gutters align-items-center\">\r\n          <div className=\"col-auto\">\r\n          </div>\r\n          <div className=\"col\">\r\n            <input className=\"form-control search_fild\" type=\"text\" name=\"city\" onChange={this.props.handleChange} value={this.props.city} placeholder=\"Search a City e.g Helsinki\" />\r\n          </div>\r\n          <div className=\"col-auto\">\r\n            <button className=\"btn btn-lg btn-danger search_btn\" onSubmit={this.props.handleSubmit} type=\"submit\">Search</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nclass Week extends Component {\r\n  render() {\r\n    return (\r\n        <div className=\"week-card flex-column\">\r\n            <p className=\"font-weight-bold\">{moment(this.props.reading.dt*1000).format(\"dddd\")}</p>\r\n              <p>{Math.round(this.props.reading.main.temp)} Â°C</p>\r\n              <i className={`owi owi-${this.props.reading.weather[0].icon} owi-5x`}></i>\r\n            <p className=\"font-weight-bold\">{this.props.reading.weather[0].description}</p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default Week;\r\n","import React, { Component } from 'react';\r\nimport {Chart} from 'react-google-charts';\r\nimport moment from 'moment';\r\n\r\nclass weatherChart extends Component {\r\n\r\n  render() {\r\n    const time = this.props.fulldata.map(list => list.dt_txt);\r\n    const temperature = this.props.fulldata.map(list => list.main.temp);\r\n    let time1 = time.map(time=>Date.parse(time))\r\n    const chartData = [['hour', 'Temperature']]\r\n    for (let i = 0; i < this.props.fulldata.length; i += 1){\r\n      //chartData.push([{v:time[i].split(' ')[1].split(':')[0],\r\n        //f:time[i].split(' ')[1]}, temperature[i]]);\r\n      //chartData.push([time[i].split(' ')[1], temperature[i]]);\r\n      chartData.push([new Date(time1[i]).toLocaleTimeString('en-US'), temperature[i]]);\r\n      //chartData.push([moment( time[i]).format('LT'), temperature[i]]);\r\n      //chartData.push([ i, temperature[i]]);\r\n    }\r\n\r\n    console.log(chartData);\r\n    const day = [];\r\n    for (let i = 0; i < this.props.fulldata.length; i += 1) {\r\n      day.push([moment( time[i]).format('dddd')]);\r\n    }\r\n    return (\r\n      <div style={{ display: 'flex', marginBottom: '5px'}}>\r\n        <Chart\r\n          width={'100%'}\r\n          height={'45vh'}\r\n          chartType=\"LineChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={chartData}\r\n          options={{\r\n            title: 'Weather Forecast',\r\n            titleTextStyle: {color: '#FFF', fontSize: 20},\r\n            chartArea: { width: '70%' },\r\n            hAxis: {\r\n              title: 'Time',\r\n              minValue: 0,\r\n              titleTextStyle: {color: '#FFF', fontSize: 18, fontStyle:'normal'},\r\n              textStyle:{color: '#FFF'},\r\n              type: 'timeofday',\r\n              ticks:[new Date(time1[0]).toLocaleTimeString('en-US')]\r\n            },\r\n            vAxis: {\r\n              title: 'Temperature',\r\n              titleTextStyle: {color: '#FFF', fontSize: 18, fontStyle:'normal'},\r\n              textStyle:{color: '#FFF'}\r\n            },\r\n            legend: {textStyle: {color: '#fff', fontSize:18}},\r\n            seriesType: 'line',\r\n            colors: ['#d9534f', '#fff'],\r\n            backgroundColor: '#254059',\r\n          }}\r\n          legendToggle\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default weatherChart;\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nclass WeatherCard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\" card weather-card\">\r\n        <div className=\"top \">\r\n          <div className=\"wrapper\">\r\n          <img src={`http://openweathermap.org/img/wn/${this.props.icon}@2x.png`} alt=\"weather-icon\" className=\"img-responsive float-right\"/>\r\n            <p className=\"date\">\r\n              <span >{moment(this.props.dt*1000).format(\"dddd\")} </span>\r\n              <span>{moment(this.props.dt*1000).format(\"LL\")}</span>\r\n            </p>\r\n            <p className=\"heading font-weight-bold\">{this.props.name}</p>\r\n            <p className=\"font-weight-bold mTop\">\r\n              <span className=\"temp-value\">{Math.round(this.props.temp)} </span>\r\n              <span className=\"temp-value\"> &deg;C</span>\r\n              <p className=\"description h-100\">{this.props.description}</p></p>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { Component } from 'react';\r\n\r\nclass MiniCard extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mini-card shadow-lg description\">\r\n          <p className=\"font-weight-bold py-2\">{this.props.name}</p>\r\n            <i className={this.props.icon}></i>\r\n          <p className=\"font-weight-bold\">{this.props.reading}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default MiniCard;\r\n","import React, { Component } from 'react';\r\nimport {Row, Col} from \"react-bootstrap\";\r\nimport Form from './Form.js';\r\nimport Week from './Week.js';\r\nimport Chart from './weatherChart.js';\r\nimport WeatherCard from './weatherCard.js';\r\nimport MiniCard from './miniCard';\r\nimport '../App.css';\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    let weekCards = this.props.weekdata.map((reading, index) => <Week reading={reading} key={index} />);\r\n\r\n    var data = (this.props);\r\n    if(typeof(data) != 'undefined'){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col md={{span: 12}} style={{ padding: 0, margin: 0 }}>\r\n            <Form handleSubmit={this.props.handleSubmit} handleChange={this.props.handleChange}/>\r\n          </Col>\r\n          <Col md={{span: 10}} style={{ padding: 0, margin: 0 }}>\r\n            <WeatherCard {...this.props}/>\r\n            <div className=\"\">{weekCards}</div>\r\n            <Chart fulldata={this.props.fulldata} {...weekCards}/>\r\n          </Col>\r\n          <Col md={{span: 2}} style={{ padding: 0, margin: 0 }}>\r\n            <MiniCard name={'Pressure'} reading={this.props.pressure} icon={'fas fa-wind'}/>\r\n            <MiniCard name={'Humidity'} reading={this.props.humidity} icon={'fas fa-tint'}/>\r\n            <MiniCard name={'Temperature Max'} reading={this.props.temp_max} icon={'fas fa-temperature-high'}/>\r\n            <MiniCard name={'Temperature Min'} reading={this.props.temp_min} icon={'fas fa-temperature-low'} />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  } else{\r\n    return <div>...is Loading</div>\r\n  }\r\n}\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport apiConfig from '../key.js';\r\nimport Card from './Card.js';\r\n\r\nclass Main extends Component {\r\n  state={\r\n    city:'helsinki',\r\n    id: 0,\r\n    main:{},\r\n    weather:{},\r\n    today: [],\r\n    week:[],\r\n    fullweek:[]\r\n  }\r\n  handleChange = e =>{\r\n    let newcity = e.target.value;\r\n    this.setState({city: newcity});\r\n  }\r\n  handleSubmit = e =>{\r\n    e.preventDefault();\r\n     console.log('The button was clicked.');\r\n     this.fetchData();\r\n  }\r\n  fetchData = () => {\r\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&APPID=${apiConfig.weatherKey}`;\r\n    fetch(weatherUrl)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({ today: data, id: data.id, main: data.main, weather:data.weather[0]});\r\n      const weekUrl = `https://api.openweathermap.org/data/2.5/forecast?id=${data.id}&units=metric&APPID=${apiConfig.weatherKey}`;\r\n      return fetch(weekUrl)\r\n    }).then(response => response.json())\r\n    .then(weekdata => {\r\n      const weeklyData = weekdata.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\r\n      this.setState({week: weeklyData, fullweek: weekdata.list});\r\n    })\r\n    .catch(error => console.log(error));\r\n  };\r\n\r\n  componentDidMount =()=>{\r\n    this.fetchData();\r\n    if(this.state.id !== 0){\r\n      this.fetchWeekData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var today = this.state.today\r\n    if(typeof(today) !=='undefined'){\r\n      return (\r\n      <div>\r\n        <div className=\"container-fluid\">\r\n        <Card {...today} {...this.state.main} {...this.state.weather} weekdata={this.state.week} fulldata={this.state.fullweek} handleSubmit={this.handleSubmit} handleChange={this.handleChange} />\r\n        <div className=\"col-md-8 offset-md-2 card-group\">\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else{\r\n    return <div>No Data</div>\r\n  }\r\n}\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './img/asset3.png';\r\nimport Main from './components/main.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}